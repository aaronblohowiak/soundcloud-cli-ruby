soundcloud-cli-ruby
===================

SoundCloud Command-Line Interface in Ruby

It lets you do cool things like search for tracks and create a playlist from the results:

  `sc s tracks -q awsome --fields=id | sc set create --title="My awesome set"`


## Installation

```
git clone git@github.com:aaronblohowiak/soundcloud-cli-ruby.git sc
cd sc
gem build sc.gemspec
gem install *.gem
sc -h
```

Help
===

You can always pass `-h` or `--help` to print the help for the current command.  In this way, the entire CLI is discoverable.  Expanded documentation and tips are provided below.


Authentication
======

SoundCloud API requires OAuth for all of its functionality, so you'll need a registered SoundCloud application. If you've never registered a SoundCloud application before, it's easy! Just sign-in using your SoundCloud account and the fill out the short form at http://soundcloud.com/you/apps. If you've previously registered a SoundCloud application, it should be listed at http://soundcloud.com/you/apps.

On your first use of sc-cli, you will be prompted to enter the Client ID, Client Secret, your username and your password.  These will all be sent **directly** to SoundCloud which will provide an `access_token`.  The `access_token` will be written to `$HOME/.sc-cli`.

*Note*: Anyone with access to this file can impersonate you on SoundCloud, so it's important to keep it secure, just as you would treat your SSH private key.

If you ever need to re-authenticate, you can use `sc authenticate`.

Search
====

```
<%= `bin/sc search -h` %>

````

For most of the searches, you can just `sc search [type] -q [query]`

Example:

```
$ sc search users -q aaronblohowiak
<%= `bin/sc search users -q aaronblohowiak` %>
```

By default, the `permalink_url` of the matched items will be printed with one url per line.  You can change the field or have multiple fields printed by passing them like `--fields=avatar_url,permalink_url`. If you just want the full json response, use the `--json` flag.  For pagination, use the `--limit` and `--offset` parameters.


Here's the output for `sc search tracks -h`:


```
<%= `bin/sc search tracks -h` %>
```


Playlists / Sets
===
`sc` is most useful for creating and deleting playlists.  You can create a playlist by passing the track ids either as a comma-separated list OR by providing a newline-delimited list to STDIN.  This lets you create playlists as part of a pipeline.

  `sc s tracks -q awsome --fields=id | sc set create --title="My awesome set"`

```
<%= `bin/sc playlist create -h` %>
```

There are several other features as well:


```
<%= `bin/sc playlists -h` %>
```


Uploading Tracks
===

You can easily upload a directory's worth of tracks to soundcloud and create a new playlist.

`sc track upload * --fields=id | sc playlist create --title="new playlist"`

The track titles will be the filenames with their extensions stripped off.  Additionally, you could pass in a list of newline-delimited filenames to the command via STDIN.


```
<%= `bin/sc track upload -h` %>
```


Fun
===

Find a track and play it from the command line.

`sc lucky` will play a random track

`sc lucky moombahton` will search for `moombahton` and play back one of the first 20 hits at random.


```
<%= `bin/sc lucky -h` %>
```

Another fun thing to do is to smashup songs from different genres.  By default, it will pick a sound from classical and a sound from storrytelling.


```
$ sc smashup happy
Playing http://soundcloud.com/treenaphoto/happy-mothers-day
Playing http://soundcloud.com/riccoescalante/those-happy-moments
```

<%= `bin/sc smashup -h` %>


Thanks
===

Some of the authentication documentation was derrived from the documentation of the `t` ruby gem.
